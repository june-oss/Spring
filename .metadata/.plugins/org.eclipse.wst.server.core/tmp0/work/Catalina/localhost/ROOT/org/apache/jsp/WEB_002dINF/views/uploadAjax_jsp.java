/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2020-11-29 02:49:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n");
      out.write("\t\t\t\t\t  \"http://www.w4.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta  http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\n");
      out.write(".uploadResult{\n");
      out.write("\twidth:100%;\n");
      out.write("\tbackground-color: gray;\n");
      out.write("}\n");
      out.write(".uploadResult ul{\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tflex-flow: row;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\talign-items: center;\n");
      out.write("}\n");
      out.write(".uploadResult ul li{\n");
      out.write("\tlist-style: none;\n");
      out.write("\tpadding: 10px;\n");
      out.write("\talign-content: center;\n");
      out.write("\ttext-align: center;\n");
      out.write("}\n");
      out.write(".uploadResult ul li img{\n");
      out.write("\twidth: 100px;\n");
      out.write("}\n");
      out.write(".uploadResult ul li span{\n");
      out.write("\tcolor:white;\n");
      out.write("}\n");
      out.write(".bigPictureWrapper{\n");
      out.write("\tposition: absolute;\n");
      out.write("\tdisplay: none;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\talign-items: center;\n");
      out.write("\ttop: 0%;\n");
      out.write("\twidth: 100%;\n");
      out.write("\theight: 100%;\n");
      out.write("\tbackground-color: gray;\n");
      out.write("\tz-index: 100;\n");
      out.write("\tbackground: rgba(255,255,255,0.5);\n");
      out.write("}\n");
      out.write(".bigPicture{\n");
      out.write("\tposition: relative;\n");
      out.write("\tdisplay: flex;\n");
      out.write("\tjustify-content: center;\n");
      out.write("\talign-items: center;\n");
      out.write("}\n");
      out.write(".bigPicture img {\n");
      out.write("\twidth: 600px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h1>Upload with Ajax</h1>\n");
      out.write("\n");
      out.write("<div class=\"uploadDiv\">\n");
      out.write("\t<input type=\"file\" name=\"uploadFile\" multiple>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"uploadResult\">\n");
      out.write("\t<ul>\n");
      out.write("\t\n");
      out.write("\t</ul>\n");
      out.write("</div>\n");
      out.write("<button id=\"uploadBtn\">Upload</button>\n");
      out.write("\n");
      out.write("<div class=\"bigPictureWrapper\">\n");
      out.write("\t<div class=\"bigPicture\">\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script \n");
      out.write("\tsrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \n");
      out.write("\tintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" \n");
      out.write("\tcrossorigin=\"anonymous\"></script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("function showImage(fileCallPath){\n");
      out.write("\t//alert(fileCallPath);\n");
      out.write("\t$(\".bigPictureWrapper\").css(\"display\",\"flex\").show();\n");
      out.write("\t\n");
      out.write("\t$(\".bigPicture\").html(\"<img src='/display?fileName=\"+encodeURI(fileCallPath)+\"'>\")\n");
      out.write("\t.animate({width:'100%', height: '100%'}, 1000);\n");
      out.write("\t\n");
      out.write("\t$(\".bigPictureWrapper\").on(\"click\", function(e){\n");
      out.write("\t\t$(\".bigPicture\").animate({width:'0%', height:'0%'}, 1000);\n");
      out.write("\t\tsetTimeout(() =>{\n");
      out.write("\t\t\t$(this).hide();\n");
      out.write("\t\t},1000);\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("$(document).ready(function(){\n");
      out.write("\t\n");
      out.write("\t//파일 확장자 유효성 체크 정규식\n");
      out.write("\tconst regex = new RegExp(\"(.*?)\\.(exe|sh|zip|alz)$\");\n");
      out.write("\t//파일의 최대크기\n");
      out.write("\tconst maxSize = 5242880; //5MB\n");
      out.write("\t//input type='file'를 포함한 div복사\n");
      out.write("\tlet cloneObj = $(\".uploadDiv\").clone();\n");
      out.write("\t//결과목록을 출력할 ul\n");
      out.write("\tconst uploadResult = $(\".uploadResult ul\");\n");
      out.write("\t\n");
      out.write("\tfunction showUploadedFile(uploadResultArr){\n");
      out.write("\t\t\n");
      out.write("\t\tlet str = \"\";\n");
      out.write("\t\t\n");
      out.write("\t\t$(uploadResultArr).each(function(i, obj){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif(!obj.image){\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tlet fileCallPath = encodeURIComponent(obj.uploadPath+ \"/\" + obj.uuid + \"_\" + obj.fileName);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tstr += \"<li><a href='/download?fileName=\"+fileCallPath+\"'><img src='/resources/img/attach.png'>\"\n");
      out.write("\t\t\t\t\t+obj.fileName + \"</a>\"\n");
      out.write("\t\t\t\t\t+\"<span data-file=\\'\"+fileCallPath+\"\\' data-type='file'> x </span></li>\";\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tlet fileCallPath = encodeURIComponent(obj.uploadPath+ \"/s_\" + obj.uuid + \"_\" + obj.fileName);\n");
      out.write("\t\t\t\tconsole.log(fileCallPath)\n");
      out.write("\t\t\t\tlet originPath = obj.uploadPath + \"/\" + obj.uuid + \"_\" + obj.fileName;\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\toriginPath = originPath.replace(new RegExp(/\\\\/g), \"/\");\n");
      out.write("\t\t\t\tconsole.log(originPath)\n");
      out.write("\t\t\t\t//str += \"<li>\" + obj.fileName + \"</li>\";\n");
      out.write("\t\t\t\tstr += \"<li><a href=\\\"javascript:showImage(\\'\"+originPath+\"\\')\\\"><img src='/display?fileName=\" + fileCallPath +  \"'></a>\"\n");
      out.write("\t\t\t\t\t+\"<span data-file=\\'\"+fileCallPath+\"\\' data-type='image'> x </span></li>\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tuploadResult.append(str);\n");
      out.write("\t\t\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction checkExtension(fileName, fileSize){\n");
      out.write("\t\t\n");
      out.write("\t\tif(fileSize >= maxSize){\n");
      out.write("\t\t\talert(\"파일 사이즈 초과\");\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tif(regex.test(fileName)){\n");
      out.write("\t\t\talert(\"해당 종류의 파일은 업로드할 수 없습니다.\");\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\treturn true;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t$(\".uploadResult\").on(\"click\", \"span\", function(e){\n");
      out.write("\t\t\n");
      out.write("\t\tlet targetFile = $(this).data(\"file\");\n");
      out.write("\t\tlet type = $(this).data(\"type\");\n");
      out.write("\t\tconsole.log(targetFile);\n");
      out.write("\t\t\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl: '/deleteFile',\n");
      out.write("\t\t\tdata: {fileName: targetFile, type: type},\n");
      out.write("\t\t\tdataType: 'text',\n");
      out.write("\t\t\ttype: 'POST',\n");
      out.write("\t\t\tsuccess: function(result){\n");
      out.write("\t\t\t\talert(result);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});//$.ajax\n");
      out.write("\t\t\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("\t$(\"#uploadBtn\").on(\"click\", function(e){\n");
      out.write("\t\t\n");
      out.write("\t\tlet formData = new FormData();\n");
      out.write("\t\t\n");
      out.write("\t\tconst inputFile = $(\"input[name='uploadFile']\");\n");
      out.write("\t\t\n");
      out.write("\t\tlet files = inputFile[0].files;\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(files);\n");
      out.write("\t\t\n");
      out.write("\t\tfor(let i = 0; i < files.length; i++){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif(!checkExtension(files[i].name, files[i].size)){\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tformData.append(\"uploadFile\", files[i]);\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : '/uploadAjaxAction',\n");
      out.write("\t\t\tprocessData : false,\n");
      out.write("\t\t\tcontentType : false,\n");
      out.write("\t\t\tdata : formData,\n");
      out.write("\t\t\ttype : 'POST',\n");
      out.write("\t\t\tdateType : 'json',\n");
      out.write("\t\t\tsuccess : function(result){\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tconsole.log(result);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tshowUploadedFile(result);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t$(\".uploadDiv\").html(cloneObj.html());\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});//ajax\n");
      out.write("\t\t\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

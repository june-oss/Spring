/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2020-11-18 19:01:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.business;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>매장 등록</title>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("\n");
      out.write("\t<style>\n");
      out.write("\t.uploadResult {\n");
      out.write("\t\n");
      out.write("\t\twidth : 100%;\n");
      out.write("\t\tbackground-color : gray;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.uploadResult ul {\n");
      out.write("\t\tdisplay : flex;\n");
      out.write("\t\tflex-flow : row;\n");
      out.write("\t\tjustify-content : center;\n");
      out.write("\t\talign-items : center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.uploadResult ul li {\n");
      out.write("\t\tlist-style : none;\n");
      out.write("\t\tpadding:10px;\n");
      out.write("\t\taligin-content : center;\n");
      out.write("\t\ttext-align : center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.uploadResult ul li img {\n");
      out.write("\t\twidth : 100px;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.uploadResult ul li img {\n");
      out.write("\t\tcolor:white;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.bigPictureWrapper {\n");
      out.write("\t\tposition : absolute;\n");
      out.write("\t\tdisplay : none;\n");
      out.write("\t\tjustify-content : center;\n");
      out.write("\t\talign-items : center;\n");
      out.write("\t\ttop : 0%;\n");
      out.write("\t\twidth : 100%;\n");
      out.write("\t\theight : 100%;\n");
      out.write("\t\tbackground-color : gray;\n");
      out.write("\t\tz-index : 100;\n");
      out.write("\t\tbackground : rgba(255,255,255,0.5);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.bigPicture {\n");
      out.write("\t\tposition : relative;\n");
      out.write("\t\tdisplay : flex;\n");
      out.write("\t\tjustify-content : center;\n");
      out.write("\t\talign-items : center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.bigPicture img {\n");
      out.write("\t\twidth : 600px;\n");
      out.write("\t}\n");
      out.write("\t</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<h1>Business Store Register Form</h1>\n");
      out.write("<form action=\"/business/register\" method=\"post\" name=\"form\">\n");
      out.write("----------------------테스트코드용----------------------<br>\n");
      out.write("<label>유저아이디</label> <input name=\"buserId\" value=\"aaaa\"><br>\n");
      out.write("<label>매장코드</label> <input name=\"clsCd\" value=\"B\"><br>\n");
      out.write("<label>좌석 상태</label> <input name=\"seatStusCd\" required=\"required\"><br>\n");
      out.write("<label>좋아요</label> <input name=\"likeTotNum\" required=\"required\"><br>\n");
      out.write("<label>리뷰개수</label> <input name=\"revwTotNum\" required=\"required\"><br>\n");
      out.write("<label>평점</label> <input name=\"avgRating\" required=\"required\"><br>\n");
      out.write("--------------------------------------<br>\n");
      out.write("<label>스토어 이름</label> <input name=\"storeNm\" required=\"required\"><br>\n");
      out.write("<label>지점</label> <input name=\"brch\" value=\"종로본\"><br>\n");
      out.write("<label>전화번호</label> <input name=\"telno\" value=\"222-2222\"><br>\n");
      out.write("<label>영업시간</label> <input name=\"openTm\" value=\"10:00\">-<input name=\"closeTm\" value=\"22:00\"><br>\n");
      out.write("<label>브레이크타임</label> <input name=\"breakSttm\" value=\"15:00\">-<input name=\"breakEntm\" value=\"17:00\"><br>\n");
      out.write("<label>라스트 오더</label> <input name=\"lastOrdTm\" value=\"21:00\"><br>\n");
      out.write("<label>가게휴무일</label> <input name=\"hldy\" value=\"연중무휴\"><br>\n");
      out.write("<label>가게 소개</label> <textarea rows=\"3\" name=\"storeIntro\" >존맛탱</textarea><br>\n");
      out.write("<label>대표메뉴</label> <input name=\"repMenu\" value=\"맛난거\"><br>\n");
      out.write("<label>가게 평균 식사 시간</label> <input name=\"avgMealTm\" value=\"30\"><br>\n");
      out.write("<label>1인석 테이블 개수</label> <input name=\"n1SeatNo\" value=\"10\"><br>\n");
      out.write("<label>2인석 테이블 개수</label> <input name=\"n2SeatNo\" value=\"5\"><br>\n");
      out.write("<label>4인석 테이블 개수</label> <input name=\"n4SeatNo\" value=\"10\"><br>\n");
      out.write("<label>수용인원</label> <input name=\"acmPnum\" value=\"60\"><br>\n");
      out.write("---------------------------------------<br>\n");
      out.write("<label>주소</label><input type=\"text\"  style=\"width:500px;\" id=\"addr\"  name=\"addr\" />\n");
      out.write("마커찍기 아직 미구현....\n");
      out.write("<input type=\"button\" onClick=\"goPopup();\" value=\"주소찾기\"/><br>\n");
      out.write("<label>상세주소</label><input type=\"text\"  style=\"width:500px;\" id=\"addrDetail\"  name=\"addrDetail\" /><br>\n");
      out.write("<label>시도명</label><input type=\"text\"  style=\"width:500px;\" id=\"siNm\"  name=\"siNm\" /><br>\n");
      out.write("<label>시군구명</label><input type=\"text\"  style=\"width:500px;\" id=\"sggNm\"  name=\"sggNm\" /><br>\n");
      out.write("<label>읍면동명</label><input type=\"text\"  style=\"width:500px;\" id=\"emdNm\"  name=\"emdNm\" /><br>\n");
      out.write("<label>lng</label><input type=\"text\"  style=\"width:500px;\" id=\"lng\"  name=\"lng\" oninput=\"moveTo()\"/><br>\n");
      out.write("<label>lat</label><input type=\"text\"  style=\"width:500px;\" id=\"lat\"  name=\"lat\" oninput=\"moveTo()\"/><br>\n");
      out.write("<div id=\"map\" style=\"width:250px;height:200px;\"></div>\n");
      out.write("----------------------------------------<br>\n");
      out.write("<button type=\"submit\">등록하기</button><br>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<div class=\"\"><h2>파일 첨부하기</h2></div>\n");
      out.write("<div class=\"file_body\">\n");
      out.write("\t<div class=\"form_img\">\n");
      out.write("\t\t<input type=\"file\" name='uploadFile' multiple>\n");
      out.write("\t</div> \n");
      out.write("\t<div class='uploadResult'>\n");
      out.write("\t\t<ul>\n");
      out.write("\t\t</ul>\n");
      out.write("\t</div> <!-- uploadResult -->\n");
      out.write("</div> \n");
      out.write("<script>\n");
      out.write("/* 페이지가 로드 되면 실행된다. */\n");
      out.write("$(document).ready(function(e){\n");
      out.write("    \n");
      out.write("    /* form 역할을 하는 엘리먼트를 선택한다. */\n");
      out.write("\tlet formObj = $(\"#regForm\");\n");
      out.write("    \n");
      out.write("    /* submit 타입의 버튼을 제어한다.*/\n");
      out.write("    \n");
      out.write("\t$(\"button[type='submit']\").on(\"click\", function(e){\n");
      out.write("        \n");
      out.write("        /* 기존 기능은 제한한다.*/\n");
      out.write("\t\te.preventDefault();\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(\"submit clicked\");\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(\"form\"+formObj);\n");
      out.write("\t\t\n");
      out.write("\t\tlet str = \"\";\n");
      out.write("        \n");
      out.write("        /* 업로드 결과 화면에 업로드 결과를 작성해준다.*/\n");
      out.write("\t\t$(\".uploadResult ul li\").each(function(i, obj) {\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tlet jobj = $(obj);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tconsole.dir(jobj);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tstr += \"<input type='hidden' name='imgs[\"+i+\"].fileName' value='\" + jobj.data(\"filename\")+\"'>\";\n");
      out.write("\t\t\tstr += \"<input type='hidden' name='imgs[\"+i+\"].uuid' value='\" + jobj.data(\"uuid\")+\"'>\";\n");
      out.write("\t\t\tstr += \"<input type='hidden' name='imgs[\"+i+\"].uploadPath' value='\" + jobj.data(\"path\")+\"'>\";\n");
      out.write("\t\t\tstr += \"<input type='hidden' name='imgs[\"+i+\"].image' value='\" + jobj.data(\"type\")+\"'>\";\n");
      out.write("\t\t\t\n");
      out.write("\t\t});\n");
      out.write("        \n");
      out.write("\t\tconsole.log(str);\n");
      out.write("\t\t\n");
      out.write("        /*위에서 작성한 글을 form에 추가하고 제출한다. */\n");
      out.write("\t\tformObj.attr(\"method\", \"post\");\n");
      out.write("\t\tformObj.append(str).submit();\n");
      out.write("\t\t\n");
      out.write("\t});\n");
      out.write("    \n");
      out.write("    /* 정규식으로 파일 형식을 제한한다. */\n");
      out.write("    let regex = new RegExp(\"(.*>)\\.(exe|sh|zip|alz)$\");\n");
      out.write("    \n");
      out.write("    /*최대 파일 크기를 제어한다  */\n");
      out.write("\tlet maxSize = 5242880; /* 5MB */\n");
      out.write("    \n");
      out.write("    /*업로드 결과를 보여준다. */\n");
      out.write("\tfunction showUploadResult(uploadResultArr) {\n");
      out.write("        \n");
      out.write("        /**업로드 된게 없으면 그대로 반환 */\n");
      out.write("\t\tif(!uploadResultArr || uploadResultArr.length == 0){return; }\n");
      out.write("        \n");
      out.write("        /*업로드 결과를 보여줄 ul를 선택 */\n");
      out.write("\t\tlet uploadUL = $(\".uploadResult ul\");\n");
      out.write("\t\t\n");
      out.write("\t\tlet str = \"\";\n");
      out.write("        \n");
      out.write("        /*업로드 결과를 보여준다. */\n");
      out.write("\t\t$(uploadResultArr).each(function(i,obj){\n");
      out.write("            \n");
      out.write("            /* 만일 파일이 이미지 형식이면 */\n");
      out.write("            /* data에 path,uuid,filename,type을 각각 저장한다. */\n");
      out.write("\t\t\tif(obj.image) {\n");
      out.write("\t\t\t\tlet fileCallPath = encodeURIComponent(obj.uploadPath+\"/s_\"+obj.uuid+\"_\"+obj.fileName);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tlet originPath = obj.uploadPath + \"\\\\\" + obj.uuid +\"_\" + obj.fileName;\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\toriginPath = originPath.replace(new RegExp(/\\\\/g),\"/\");\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tstr += \"<li data-path='\" + obj.uploadPath +\"'\";\n");
      out.write("\t\t\t\tstr += \"data-uuid='\"+obj.uuid+\"' data-filename='\"+obj.fileName+\"'data-type='\"+obj.image+\"'\";\n");
      out.write("\t\t\t\tstr += \"><a href=\\\"javascript:showImage(\" + originPath + \")\\\">\" + \"<div>\";\n");
      out.write("\t\t\t\tstr += \"<span>\" + obj.fileName +\"</span>\";\n");
      out.write("\t\t\t\tstr += \"<img src='/display?fileName=\" + fileCallPath + \"'>\";\n");
      out.write("\t\t\t\tstr += \"</div></a>\";\n");
      out.write("\t\t\t\tstr += \"<button type ='button' data-file=\\'\"+fileCallPath+\"\\' data-type='image' class='btn btn-warning btn-circle'><i class='fa fa-times'></i>삭제</button><br>\";\n");
      out.write("\t\t\t\tstr += \"</li>\";\n");
      out.write("                /* 만일 파일이 이미지 형식이 아니면 */\n");
      out.write("                /* default img를 보여준다. */\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tlet fileCallPath = encodeURIComponent(obj.uploadPath + \"/\" + obj.uuid + \"_\" + obj.fileName);\n");
      out.write("\t\t\t\tlet fileLink = fileCallPath.replace(new RegExp(/\\\\/g),\"/\");\n");
      out.write("\n");
      out.write("\t\t\t\tstr += \"<li \"\n");
      out.write("\t\t\t\tstr += \"data-path='\" + obj.uploadPath + \"'data-uuid='\" + obj.uuid + \"'data-filename='\" + obj.fileName + \"' data-type='\" +obj.image+\"'><a href='/download?fileName=\" + fileCallPath + \"'>\" + \"<div>\";\n");
      out.write("\t\t\t\tstr += \"<span> \" + obj.fileName + \"</span>\";\n");
      out.write("\t\t\t\tstr += \"<img src='/resources/img/attach.png'>\";\n");
      out.write("\t\t\t\tstr += \"</a></div>\";\n");
      out.write("\t\t\t\tstr += \"<button type='button' data-file=\\'\"+fileCallPath+\"\\'data-type='file' class='btn btn-warning btn-circle'><i class='fa fa-times'></i>삭제</button><br>\";\n");
      out.write("\t\t\t\tstr += \"</li>\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\tuploadUL.append(str);\n");
      out.write("\t}\n");
      out.write("    \n");
      out.write("    /*파일 valid check */\n");
      out.write("\tfunction checkExtension(fileName, fileSize) {\n");
      out.write("        \n");
      out.write("        /*파일 사이즈를 체크한다. */\n");
      out.write("        if(fileSize >= maxSize){\n");
      out.write("\t\t\talert(\"파일 사이즈 초과\");\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t\t/*파일 형식을 체크한다. */\n");
      out.write("\t\tif(regex.test(fileName)) {\n");
      out.write("\t\t\talert(\"해당 종류의 파일은 업로드 할 수 없습니다.\");\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t\treturn true;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("    \n");
      out.write("    /* change() 해당하는 요소의 value에 변화가 생길 경우 이를 감지하여 등록된 콜백함수를 동작시킨다.  */\n");
      out.write("\t$(\"input[type='file']\").change(function(e){\n");
      out.write("\t\t\n");
      out.write("\t\tlet cloneObj = $(\".form_img\").clone();\n");
      out.write("\t\t\n");
      out.write("\t\tlet formData = new FormData();\n");
      out.write("\t\t\n");
      out.write("\t\tlet inputFile = $(\"input[name='uploadFile']\");\n");
      out.write("\t\t\n");
      out.write("\t\tlet files = inputFile[0].files;\n");
      out.write("\t\t\n");
      out.write("\t\tfor(let i = 0; i < files.length; i++){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif(!checkExtension(files[i].name, files[i].size)) {\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("            }\n");
      out.write("            /* uploadFile 이라는 변수명에 파일 배열(스프링에서는 MultipartFile[]로 받는다)을 달아서보낸다. */\n");
      out.write("\t\t\tformData.append(\"uploadFile\", files[i]);\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : '/uploadAjaxAction',\n");
      out.write("\t\t\tprocessData : false,\n");
      out.write("            contentType : false, \n");
      out.write("            data: formData,\n");
      out.write("            type: 'POST',\n");
      out.write("\t\t\tdataType : 'json',\n");
      out.write("\t\t\tsuccess : function(result) {\n");
      out.write("\t\t\t    console.log(result);\n");
      out.write("\t\t\t    showUploadResult(result); // 업로드 결과 처리 함수\n");
      out.write("\t\t\t    $(\".form_img\").html(cloneObj.html()); // 첨부파일 개수 초기화\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\n");
      out.write("\t\t})\n");
      out.write("\t\t\n");
      out.write("\t});\n");
      out.write("    \n");
      out.write("    /* 업로드 결과를 누르면 해당 파일을 제거한다.  */\n");
      out.write("\t$(\".uploadResult\").on(\"click\", \"button\", function(e) {\n");
      out.write("\t\t\n");
      out.write("\t\tlet targetFile = $(this).data(\"file\");\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(targetFile);\n");
      out.write("\t\t\n");
      out.write("\t\tlet type = $(this).data(\"type\");\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(type);\n");
      out.write("\t\t\n");
      out.write("\t\tlet targetLi = $(this).closest(\"li\");\n");
      out.write("\t\t\n");
      out.write("\t\tconsole.log(targetLi);\n");
      out.write("\t\t\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : '/deleteFile',\n");
      out.write("\t\t\tdata : {fileName : targetFile, type:type},\n");
      out.write("\t\t\tdataType : 'text',\n");
      out.write("\t\t\ttype : 'POST',\n");
      out.write("\t\t\tsuccess : function(result) {\n");
      out.write("\t\t\t\talert(result);\n");
      out.write("\t\t\t\ttargetLi.remove();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}); // $.ajax\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("\tfunction showImage(fileCallPath) {\n");
      out.write("\t\t\n");
      out.write("\t\talert(fileCallPath);\n");
      out.write("\t\t\n");
      out.write("\t\t$(\".bigPictureWrapper\").css(\"display\",\"flex\").show();\n");
      out.write("\t\t\n");
      out.write("\t\t$(\".bigPicture\")\n");
      out.write("\t\t.html(\"<img src='/display?fileName=\" +encodeURI(fileCallPath) + \"'>\")\n");
      out.write("\t\t.animate({width:'100%',height:'100%'},1000);\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t}// end show image\n");
      out.write("\t\n");
      out.write("\t$(\".bigPictureWrapper\").on(\"click\",function(e){\n");
      out.write("\t\t$(\".bigPicture\").animate({width:'0%',height:'0%'},1000);\n");
      out.write("\t\tsetTimeout(()=>{\n");
      out.write("\t\t\t$(this).hide();\n");
      out.write("\t\t}, 1000);\n");
      out.write("\t});\n");
      out.write("}); // ready end\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0e7b9cd1679ce3dedf526e66a6c1a860\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0e7b9cd1679ce3dedf526e66a6c1a860&libraries=services\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("//주소 api\n");
      out.write("function goPopup(){\n");
      out.write("\tvar pop = window.open(\"/popup/jusoPopup.jsp\",\"pop\",\"width=570,height=420, scrollbars=yes, resizable=yes\"); \n");
      out.write("}\n");
      out.write("function jusoCallBack(roadAddrPart1,addrDetail,siNm,sggNm,emdNm){\n");
      out.write("\tdocument.form.addr.value = roadAddrPart1;\n");
      out.write("\tdocument.form.addrDetail.value = addrDetail;\n");
      out.write("\tdocument.form.siNm.value = siNm;\n");
      out.write("\tdocument.form.sggNm.value = sggNm;\n");
      out.write("\tdocument.form.emdNm.value = emdNm;\n");
      out.write("\t//위도 경도를 가져온다.\n");
      out.write("\t//kakaoApi GeoCode\n");
      out.write("\t$.ajax({\n");
      out.write("           url:'https://dapi.kakao.com/v2/local/search/address.json?query='+encodeURIComponent(roadAddrPart1),\n");
      out.write("           type:'GET',\n");
      out.write("           headers: {'Authorization' : 'KakaoAK e511e2ddb9ebfda043b94618389a614c'},\n");
      out.write("\t   success:function(data){\n");
      out.write("\t       console.log(data.documents[0].x);\n");
      out.write("\t       document.form.lng.value = data.documents[0].x\n");
      out.write("\t       document.form.lat.value = data.documents[0].y\n");
      out.write("\t       var moveLatLon = new kakao.maps.LatLng(data.documents[0].y, data.documents[0].x);\n");
      out.write("\t\t   map.panTo(moveLatLon);\n");
      out.write("\t   },\n");
      out.write("\t   error : function(e){\n");
      out.write("\t       console.log(e);\n");
      out.write("\t   }\n");
      out.write("\t})\n");
      out.write("}\n");
      out.write("\tvar container = document.getElementById('map');\n");
      out.write("\tvar options = {\n");
      out.write("\t\tcenter: new kakao.maps.LatLng(37.5007351675912, 126.958669749605),\n");
      out.write("\t\tlevel: 3\n");
      out.write("\t};\n");
      out.write("\tvar map = new kakao.maps.Map(container, options);\n");
      out.write("\t\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2020-11-21 12:20:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.search;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1605067212452L));
    _jspx_dependants.put("jar:file:/Users/hyeonjung/Documents/Coding/spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/dealight_project/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/Users/hyeonjung/Documents/Coding/spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/dealight_project/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- 현중 -->\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style>\n");
      out.write(".row {\n");
      out.write("  display: -webkit-flex;\n");
      out.write("  display: flex;\n");
      out.write("}\n");
      out.write(".column {\n");
      out.write("  -webkit-flex: 1;\n");
      out.write("  -ms-flex: 1;\n");
      out.write("  flex: 1;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*       거리바      */\n");
      out.write(".level {\n");
      out.write("    width: 200px;\n");
      out.write("    margin: 10px auto;\n");
      out.write("}\n");
      out.write(".level input {\n");
      out.write("    width: 100%;\n");
      out.write("}\n");
      out.write("datalist {\n");
      out.write("    width: 121%;\n");
      out.write("    display: -webkit-box;\n");
      out.write("    display: -webkit-flex;\n");
      out.write("    display: -ms-flexbox;\n");
      out.write("    display: flex;\n");
      out.write("}\n");
      out.write("\n");
      out.write("datalist option {\n");
      out.write("    -webkit-box-flex: 1;\n");
      out.write("    -webkit-flex-grow: 1;\n");
      out.write("        -ms-flex-positive: 1;\n");
      out.write("            flex-grow: 1;\n");
      out.write("    -webkit-flex-basis: 0;\n");
      out.write("        -ms-flex-preferred-size: 0;\n");
      out.write("            flex-basis: 0;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"row\">\n");
      out.write("  <div class=\"column\" style=\"background-color:#bbb;\">\n");
      out.write("  \t<form action=\"#\" id=\"searchForm\">\n");
      out.write("  \t\t<label>인원</label><input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${search.PNum }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("  \t\t<label>시간</label><input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${search.time }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("  \t\t<label>지역</label><input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${search.region }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("  \t\t<label>검색어</label><input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${search.hashTag }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("  \t\t<label>검색어</label><input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${search.storeNm }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("  \t</form>\n");
      out.write("\t<form id=\"searchFilter\" action=\"#\" >\n");
      out.write("\t\t<label>정렬순서\n");
      out.write("\t\t<select name=\"sortType\">\n");
      out.write("\t\t\t<option value=\"D\">거리순</option>\n");
      out.write("\t\t\t<option value=\"H\">좋아요순</option>\n");
      out.write("\t\t\t<option value=\"R\">평점순</option>\n");
      out.write("\t\t\t<option value=\"T\">리뷰순</option>\n");
      out.write("\t\t</select></label>\n");
      out.write("\t\t<label>우선순위\n");
      out.write("\t\t<select name=\"sortPriority\">\n");
      out.write("\t\t\t<option value=\"\">--</option>\n");
      out.write("\t\t\t<option value=\"H\">핫딜매장우선보기</option>\n");
      out.write("\t\t\t<option value=\"S\">식사가능매장우선보기</option>\n");
      out.write("\t\t\t<option value=\"W\">웨이팅있는매장보기</option>\n");
      out.write("\t\t\t<option value=\"R\">예약가능매장보기(아직 미구현)</option>\n");
      out.write("\t\t</select></label><br>\n");
      out.write("\t\t<label><input name=\"openStore\" type=\"checkbox\" name=\"openStore\" checked=\"checked\"> 영업중인매장만보기</label>\n");
      out.write("\t\t<div class=\"level\">\n");
      out.write("\t\t<input type=\"range\" min=\"0\" max=\"4\" list=\"num\" name=\"distance\" />\n");
      out.write("            <datalist id=\"num\">\n");
      out.write("                <option value=\"0.3\" label=\"0.3km\"/>\n");
      out.write("                <option value=\"0.5\" label=\"0.5km\"/>\n");
      out.write("                <option value=\"1\" label=\"1km\"/>\n");
      out.write("                <option value=\"3\" label=\"3km\"/>\n");
      out.write("                <option value=\"5\" label=\"5km\"/>\n");
      out.write("            </datalist>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<!-- 데이터중복 없에는 방향을 생각해보자....... -->\n");
      out.write("\t\t<input id=\"searchButton\" type=\"submit\" value=\"search\">\n");
      out.write("\t</form>\n");
      out.write("\t<div class=\"list\"style=\"width:750px;height:700px;overflow: scroll;\">\n");
      out.write("\t</div>\n");
      out.write("\t<!-- 페이징처리 -->\n");
      out.write("\t<div class=\"pagination\">\n");
      out.write("\t\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"column\" style=\"background-color:#aaa;position:sticky;top: 0;\">\n");
      out.write("\t<div id=\"map\" style=\"width:750px;height:700px;\" ></div>\n");
      out.write("\t <button onclick=\"moveToUser()\">내위치보기</button> \n");
      out.write("\t <button onclick=\"searchMap()\">현재위치애서 검색하기</button>\n");
      out.write("\tMAP API\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t \n");
      out.write("\t</div>\n");
      out.write(" </div> \n");
      out.write(" \n");
      out.write("<!-- 파라미터 목록~ -->\n");
      out.write("<form action=\"/search/\" method=\"get\" id=\"actionForm\">\n");
      out.write("\t<input type=\"text\" name=\"pageNum\" value=\"1\">\n");
      out.write("\t<input type=\"text\" name=\"amount\" value=\"20\">\n");
      out.write("\t<input type=\"text\" name=\"lat\" value=\"37.570414\">\n");
      out.write("\t<input type=\"text\" name=\"lng\" value=\"126.985320\">\n");
      out.write("\t<input type=\"text\" name=\"distance\" value=\"1\">\n");
      out.write("\t<input type=\"text\" name=\"sortType\" value=\"D\">\n");
      out.write("\t<input type=\"text\" name=\"sortPriority\" value=\"\">\n");
      out.write("\t<input type=\"text\" name=\"openStore\" value=\"true\">\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0e7b9cd1679ce3dedf526e66a6c1a860\"></script>\n");
      out.write("<!-- 리스트 불러오기 -->\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\t//페이지가 시작된다.\n");
      out.write("let searchButton = document.getElementById(\"#searchButton\");\n");
      out.write("const actionForm = document.forms[\"actionForm\"];\n");
      out.write("\t\n");
      out.write("$(document).ready(function(){\n");
      out.write("\t//메인에서 넘어오는 정보들 날짜, 인원, 검색어, 해시태그\n");
      out.write("\t//검색정보를 받아온다. ( 인원, 시간, 지역, 해시태그)\n");
      out.write("\t//매장메인을 보여준다.\n");
      out.write("\tshowMain();\n");
      out.write("\t\n");
      out.write("\t//지도화면에서 정하는것들 - 정렬조건(기본 거리순), 필터(예약가능, 줄서기가능, 옵션, 핫딜중)\n");
      out.write("\t//지도화면에서는 버튼을 눌러야 적용\n");
      out.write("\t\n");
      out.write("\t//searchButton.onclick()\n");
      out.write("\t//search button 이벤트 등록\n");
      out.write("\t$(\"#searchButton\").on(\"click\", function(e){\n");
      out.write("\t\te.preventDefault();\n");
      out.write("\t\tconsole.log(\"click\");\n");
      out.write("\t\t\n");
      out.write("\t\tlet searchFilter = document.forms[\"searchFilter\"];\n");
      out.write("\t\t//actinoForm에 검색사항을 변경한다.\n");
      out.write("\t\t//오픈매장 보기 변경\n");
      out.write("\t\tactionForm.elements[\"openStore\"].value = searchFilter[\"openStore\"].checked;\n");
      out.write("\t\t//우선순위 변경\n");
      out.write("\t\tactionForm.elements[\"sortPriority\"].value = searchFilter[\"sortPriority\"].value;\n");
      out.write("\t\t//검색반경 변경\n");
      out.write("\t\tlet distance = searchFilter[\"distance\"];\n");
      out.write("\t\tactionForm.elements[\"distance\"].value = distance.list.options[distance.value].value;\n");
      out.write("\t\t//page를 1로 변경\n");
      out.write("\t\tactionForm.elements[\"pageNum\"].value = 1;\n");
      out.write("\t\t//sortType을 설정한 값으로 변경\n");
      out.write("\t\tactionForm.elements[\"sortType\"].value = searchFilter[\"sortType\"].value\n");
      out.write("\t\t//main페이지 다시출력\n");
      out.write("\t\tshowMain();\n");
      out.write("\t});\n");
      out.write("})\n");
      out.write("//searchButton에 click이벤트를 등록한다.\n");
      out.write("function addEventHandlerToSearchButton(){\n");
      out.write("\tsearchButton.onclick = function(e){\n");
      out.write("\t\tconsole.log(\"searchBtn Click\");\n");
      out.write("\t\t//button의 submit을 막는다.\n");
      out.write("\t\te.preventDefault();\n");
      out.write("\t\t//searchFilter의 내용을 actionForm에 적용시킨다.\n");
      out.write("\t\t//정렬조건 적용\n");
      out.write("\t\t//우선순위 적용\n");
      out.write("\t\t//검색반경 적용\n");
      out.write("\t\t//오픈매장보기 적용\n");
      out.write("\t\t//paging의 pageNum을 1로 변경\n");
      out.write("\t\t//showMain(); 호출\n");
      out.write("\t\t\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("\t\n");
      out.write("function getRange(distance){\n");
      out.write("\tswitch(distance){\n");
      out.write("\tcase 0.3:\n");
      out.write("\t\treturn 1;\n");
      out.write("\tcase 0.5:\n");
      out.write("\t\treturn 2;\n");
      out.write("\tcase 1:\n");
      out.write("\t\treturn 3;\n");
      out.write("\tcase 3:\n");
      out.write("\t\treturn 4;\n");
      out.write("\tcase 5:\n");
      out.write("\t\treturn 5;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("//mainPage를 불러오는 함수\n");
      out.write("function showMain(){\n");
      out.write("\t\t//ajax통신을 한다.\n");
      out.write("\t\tgetList(function(pageDTO){\n");
      out.write("\t\t\t//페이지 목록을 출력한다.\n");
      out.write("\t\t\tshowList(pageDTO.storeList);\n");
      out.write("\t\t\t//페이징 처리를 한다.\n");
      out.write("\t\t\tshowPaging(pageDTO);\n");
      out.write("\t\t\t//지도에 마커표시를한다.\n");
      out.write("\t\t\tshowMap(pageDTO.storeList);\n");
      out.write("\t\t\t//actionForm을 업데이트한다.\n");
      out.write("\t\t\tactionFormUpdate(pageDTO.cri);\n");
      out.write("\t\t\t//searchFilter를 업데이트한다.\n");
      out.write("\t\t\tsearchFilterUpdate(pageDTO.cri);\n");
      out.write("\t\t\t//-------------------------스크롤을 맨위로 올려주는 함수필요!!!!!!!!!!!!!!!\n");
      out.write("\t\t\tvar scroll = document.getElementsByClassName(\"list\");\n");
      out.write("\t\t\tscroll[0].scrollTop = 0;\n");
      out.write("\t\t})\n");
      out.write("}\n");
      out.write("\n");
      out.write("//ajax로 리스트를 불러온다. cri,storeList ,paging관련 변수들이 다 넘어온다.\n");
      out.write("function getList(callback,error){\n");
      out.write("\t$.ajax({\n");
      out.write("\t\ttype : 'get',\n");
      out.write("\t\turl : '/list/',\n");
      out.write("\t\tcontentType : \"application/json; charset=utf-8\",\n");
      out.write("\t\tdata : createObj(actionForm),\n");
      out.write("\t\tsuccess : function(result, status, xhr){\n");
      out.write("\t\t\tif(callback){\n");
      out.write("\t\t\t\tcallback(result);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\t\terror : function(xhr, status, er){\n");
      out.write("\t\t\tif(error){\n");
      out.write("\t\t\t\terror(er);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("//form data를 obj로 바꿔준다.\n");
      out.write("function createObj(form){\n");
      out.write("\tlet obj = Object();\n");
      out.write("\tfor(let i = 0 ; i < form.length ; i++){\n");
      out.write("\t\tobj[form[i].name] = form[i].value;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\treturn obj;\n");
      out.write("}\n");
      out.write("\n");
      out.write("//매장목록을 출력하는 함수\n");
      out.write("function showList(storeList){\n");
      out.write("\tvar str = \"\";\n");
      out.write("\tvar list = $(\".list\");\n");
      out.write("\tif(storeList==null || storeList.length==0){\n");
      out.write("\t\t//alert를 띄워준다.\n");
      out.write("\t\tlist.html(\"검색결과가 없습니다.\");\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\t\tconsole.log(storeList)\n");
      out.write("\tfor( var i=0, len=storeList.length||0; i<len; i++){\n");
      out.write("\t\tstr += \"<div class='\"+storeList[i].storeId+\"'>--------------\";\n");
      out.write("\t\tstr += \"<h5>매장번호 : \" + storeList[i].storeId + \"</h5>\";\n");
      out.write("\t\tstr += \"<div>매장거리 : \" + storeList[i].dist + \"</div>\";\n");
      out.write("\t\tstr += \"<div>위치 : \" + storeList[i].addr + \"</div>\";\n");
      out.write("\t\tstr += \"<div>위치 : \" + storeList[i].lng + \"</div>\";\n");
      out.write("\t\tstr += \"<div>위치 : \" + storeList[i].lat + \"</div>\";\n");
      out.write("\t\tstr += \"-----------------------------------------------------\";\n");
      out.write("\t\tstr += \"<div>매장사진 : \" + storeList[i].repImg + \"</div>\";\n");
      out.write("\t\tstr += \"<div>좋아요 : \" + storeList[i].likeTotNum + \"</div>\";\n");
      out.write("\t\tstr += \"<div>매장평점 : \" + storeList[i].avgRating +\"(\" +storeList[i].revwTotNum + \")</div>\";\n");
      out.write("\t\tstr += \"<div>매장이름 : \" + storeList[i].storeNm + \"</div>\";\n");
      out.write("\t\tstr += \"<div>매장 영업시간 : \" + storeList[i].openTm + \"-\" + storeList[i].closeTm +\"</div>\";\n");
      out.write("\t\tstr += \"<div>대표메뉴 : \" + storeList[i].repMenu + \"</div>\";\n");
      out.write("\t\tstr += \"<div>대기중인 인원 : </div>\";\n");
      out.write("\t\tstr += \"<div>오늘 예약중인 인원 : </div>\";\n");
      out.write("\t\tstr += \"<div>식사가능 여부 : \" + storeList[i].seatStusCd + \"</div>\";\n");
      out.write("\t\tif(storeList[i].htdlStusCd == \"A\"){\n");
      out.write("\t\t\tstr += \"<button style='background-color:red;'>핫딜 여부</button>\"; \n");
      out.write("\t\t}\n");
      out.write("\t\tif(storeList[i].htdlStusCd == \"P\"){\n");
      out.write("\t\t\tstr += \"<button style='background-color:blue;'>핫딜 여부</button>\"; \n");
      out.write("\t\t}\n");
      out.write("\t\tif(storeList[i].seatStusCd == \"R\"){\n");
      out.write("\t\t\tstr += \"<button style='background-color:green;'>줄서기</button>\"; \n");
      out.write("\t\t}\n");
      out.write("\t\tstr += \"<button>예약하기</button>\";\n");
      out.write("\t\tstr += \"<div>핫딜 상세 정보</div>\";\n");
      out.write("\t\tstr += \"</div>\";\n");
      out.write("\t}\n");
      out.write("\tlist.html(str);\n");
      out.write("}\n");
      out.write("\n");
      out.write("//페이징 처리를 하는 함수.\n");
      out.write("function showPaging(pageDTO){\n");
      out.write("\t\n");
      out.write("\tvar str = \"\";\n");
      out.write("\tvar paging = $(\".pagination\");\n");
      out.write("\t\n");
      out.write("\tif(pageDTO.prev){\n");
      out.write("\t\tstr += \"<a href='\"+(pageDTO.startPage -1)+\"'>Previous </a>\"\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfor(var i = pageDTO.startPage;i<pageDTO.endPage+1;i++){\n");
      out.write("\t\t//console.log(i)\n");
      out.write("\t\t//console.log(pageDTO.cri.pageNum)\n");
      out.write("\t\tstr += (pageDTO.cri.pageNum == i ?\"<\":\"\");\n");
      out.write("\t\tstr += \"<a href='\"+ i +\"' >\"+i+\" </a> \";\n");
      out.write("\t\tstr += (pageDTO.cri.pageNum == i ?\">\":\"\");\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tif(pageDTO.next){\n");
      out.write("\t\tstr += \"<a href='\"+(pageDTO.endPage + 1)+\"'>Next </a>\";\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tpaging.html(str);\n");
      out.write("\t//a태그 관련 이벤트는 a태그가 생성될때 등록해준다.\n");
      out.write("\t$(\".pagination a\").on(\"click\", addPageEventHandler);\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("\n");
      out.write("//actionForm을 업데이트를 하는 함수.\n");
      out.write("function actionFormUpdate(cri){\n");
      out.write("\tconsole.log(cri[actionForm.elements[0].name]);\n");
      out.write("\tfor(let i = 0 ; i < actionForm.length; i++){\n");
      out.write("\t\tactionForm.elements[i].value = cri[actionForm.elements[i].name];\n");
      out.write("\t}\n");
      out.write("\t/* actionForm.elements[\"pageNum\"].value\t\t=\t(pageDTO.cri.pageNum); \n");
      out.write("\tactionForm.elements[\"amount\"].value\t\t\t=\t(pageDTO.cri.amount); \n");
      out.write("\tactionForm.elements[\"distance\"].value\t\t=\t(pageDTO.cri.distance); \n");
      out.write("\tactionForm.elements[\"lat\"].value\t\t\t=\t(pageDTO.cri.lat); \n");
      out.write("\tactionForm.elements[\"lng\"].value\t\t\t=\t(pageDTO.cri.lng); \n");
      out.write("\tactionForm.elements[\"sortType\"].value\t\t=\t(pageDTO.cri.sortType);\n");
      out.write("\tactionForm.elements[\"sortPriority\"].value\t=\t(pageDTO.cri.sortPriority);\n");
      out.write("\tactionForm.elements[\"openStore\"].value\t\t=\t(pageDTO.cri.openStore); */\n");
      out.write("}\n");
      out.write("let searchFilter = document.forms[\"searchFilter\"];\n");
      out.write("//search filter를 업데이트 하는 함수\n");
      out.write("function searchFilterUpdate(cri){\n");
      out.write("\tfor(let i = 0 ; i < searchFilter.length; i++){\n");
      out.write("\t\tlet name = searchFilter[i].name;\n");
      out.write("\t\t\n");
      out.write("\t\tif(name == \"distance\"){\n");
      out.write("\t\t\tconst range = searchFilter[\"distance\"].list.options;\n");
      out.write("\t\t\tfor(let j = 0; j<range.length; j++){\n");
      out.write("\t\t\t\tif(cri.distance == range[j].value){\n");
      out.write("\t\t\t\t\tsearchFilter[name].value = j;\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}//end of for\n");
      out.write("\t\t} else if(name == \"openStore\"){\n");
      out.write("\t\t\tsearchFilter[name].checked = cri[name];\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tsearchFilter.elements[i].value = cri[searchFilter.elements[i].name];\n");
      out.write("\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t}\n");
      out.write("\t/* $(\"#sortType\").val(cri.sortType);\n");
      out.write("\t$(\"#sortPriority\").val(pageDTO.cri.sortPriority);\n");
      out.write("\t$(\"#range\").val(getRange(pageDTO.cri.distance));\n");
      out.write("\t$(\"#openStore\").prop(\"checked\", pageDTO.cri.openStore); */\n");
      out.write("}\n");
      out.write("\n");
      out.write("//페이지 번호클릭시 발생이벤트\n");
      out.write("function addPageEventHandler(e){\n");
      out.write("\t\n");
      out.write("\te.preventDefault();\n");
      out.write("\t//console.log('click');\n");
      out.write("\t\n");
      out.write("\t//actionForm에 내용을 업데이트한다.\n");
      out.write("\tactionForm.find(\"input[name='pageNum']\").val($(this).attr(\"href\"));\n");
      out.write("\t\n");
      out.write("\t//해당페이지에 해당하는 ajax통신을 요청한다.\n");
      out.write("\tshowMain();\t\n");
      out.write("\n");
      out.write("}\n");
      out.write("\n");
      out.write("//-------------------------------------------------------------------------------------\n");
      out.write("//map관련 함수\n");
      out.write("\t\tlet lat = actionForm.elements[\"lat\"]\n");
      out.write("\t\tlet lng = actionForm.elements[\"lng\"]\n");
      out.write("\t\tlet container = document.getElementById('map');\n");
      out.write("\t\tlet options = {\n");
      out.write("\t\t\tcenter: new kakao.maps.LatLng(lat.value, lng.value),\n");
      out.write("\t\t\tlevel: 5\n");
      out.write("\t\t};\n");
      out.write("\t\t//지도생성\n");
      out.write("\t\tvar map = new kakao.maps.Map(container, options);\n");
      out.write("\t\t\n");
      out.write("\t\tfunction searchMap(){\n");
      out.write("\t\t\tvar latlng = map.getCenter(); \n");
      out.write("\t\t   \n");
      out.write("\t\t\tlat.value = latlng.getLat();\n");
      out.write("\t\t\tlng.value = latlng.getLng();\n");
      out.write("\t\t\t\n");
      out.write("\t\t    showMain();\n");
      out.write("\t\t}\n");
      out.write("\t\t//마커들을 가지고있는 배열\n");
      out.write("\t\tvar markers=[];\n");
      out.write("\t\tvar selectedMaker = null;\n");
      out.write("\t\tfunction showMap(storeList){\n");
      out.write("\t\t\t//기존마커 삭제\n");
      out.write("\t\t\tfor(let i =0; i<markers.length; i++){\n");
      out.write("\t\t\t\tmarkers[i].setMap(null);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif(storeList.length==0 || storeList == null){\n");
      out.write("\t\t\t\treturn;\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t//지도의 레벨과 범위를 정해주는 변수\n");
      out.write("\t\t\tlet bounds = new kakao.maps.LatLngBounds();\n");
      out.write("\t\t\t//\n");
      out.write("\t\t\tlet positions = [];\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tfor(let i = 0; i<storeList.length; i++) {\n");
      out.write("\t\t\t\tlet storeLatLng =new kakao.maps.LatLng(storeList[i].lat, storeList[i].lng)\n");
      out.write("\t\t\t\tvar imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\"; \n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tvar marker =new kakao.maps.Marker({\n");
      out.write("\t\t\t        map: map, // 마커를 표시할 지도\n");
      out.write("\t\t\t        position: storeLatLng, // 마커를 표시할 위치\n");
      out.write("\t\t\t        title : storeList[i].storeId, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n");
      out.write("\t\t\t        image : new kakao.maps.MarkerImage(imageSrc, new kakao.maps.Size(24, 35))// 마커 이미지\n");
      out.write("\t\t\t    });\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t    var infoStore = new kakao.maps.InfoWindow({\n");
      out.write("\t\t\t        content: \"<div class='\"+ storeList[i].storeId +\"'>\"+storeList[i].storeNm+\"</div>\" // 인포윈도우에 표시할 내용\n");
      out.write("\t\t\t    });\n");
      out.write("\t\t\t    \n");
      out.write("\t\t\t\taddMarkerEvent(marker,infoStore,i);\n");
      out.write("\t\t\t    \n");
      out.write("\t\t\t    markers.push(marker);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tbounds.extend(storeLatLng);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tmap.setBounds(bounds);\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\tfunction addMarkerEvent(marker,infoStore,i){\n");
      out.write("\t\t\t//console.log(i);\n");
      out.write("\t            var store = document.getElementsByClassName(\"list\")[0];\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tkakao.maps.event.addListener(marker, 'mouseover', function() {\n");
      out.write("\n");
      out.write("\t\t\t\tinfoStore.open(map, marker);\n");
      out.write("\t            store.childNodes[i].style.backgroundColor=\"white\";\n");
      out.write("\t\t        \n");
      out.write("\t\t    });\n");
      out.write("\t\t\tkakao.maps.event.addListener(marker, 'mouseout', function() {\n");
      out.write("\n");
      out.write("\t            store.childNodes[i].style.backgroundColor=\"#bbb\";\n");
      out.write("\t            infoStore.close();\n");
      out.write("\t\t        \n");
      out.write("\t\t    });\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tkakao.maps.event.addListener(marker, 'click', function() {\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tvar scroll = document.getElementsByClassName(\"list\")[0];\n");
      out.write("\t\t\t\tconsole.log(marker.Fb)\n");
      out.write("\t\t        var storeId = marker.Fb\n");
      out.write("\t\t\t\tvar target = document.getElementsByClassName(storeId)[0]\n");
      out.write("\t\t\t\tscroll.scrollTop = target.offsetTop - 300;\n");
      out.write("\t\t\t\t\n");
      out.write("\n");
      out.write("\t\t    });\n");
      out.write("\n");
      out.write("\t\t    \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction moveToUser() {\n");
      out.write("\t\t    // 이동할 위도 경도 위치를 생성합니다 \n");
      out.write("\t\t    // 현재 내위치로가 경로필요\n");
      out.write("\t\t    var moveLatLon = new kakao.maps.LatLng(37.570414, 126.98532);\n");
      out.write("\t\t    map.setLevel(3);\n");
      out.write("\t\t    map.panTo(moveLatLon);            \n");
      out.write("\t\t}        \n");
      out.write("\t\t\n");
      out.write("\t\t//지도위에 컨트롤러 생성하기\n");
      out.write("\t\tmap.addControl( new kakao.maps.ZoomControl(), kakao.maps.ControlPosition.TOPRIGHT);\n");
      out.write("\t\t\n");
      out.write("\t\t// 마커를 생성합니다\n");
      out.write("\t\tvar user = new kakao.maps.Marker({\n");
      out.write("\t\t    position: new kakao.maps.LatLng(lat.value, lng.value)\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\t// 마커가 지도 위에 표시되도록 설정합니다\n");
      out.write("\t\tuser.setMap(map);\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

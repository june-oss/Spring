/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2020-12-16 03:02:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.dealight.business;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js\"></script>\n");
      out.write("<script src=\"/resources/js/Chart.js\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div class=\"well\">\n");
      out.write("\t\t<h2>웨이팅 등록</h2>\n");
      out.write("\t\t<form action=\"/dealight/store/wait\" method=\"post\">\n");
      out.write("\t\t\t웨이팅 인원 : <input type=\"number\" name=\"pnum\"></br>\n");
      out.write("\t\t\t매장 번호 : <input type=\"number\" name=\"storeId\"></br>\n");
      out.write("\t\t\t<button type=\"submit\">온라인 웨이팅 등록</button></br>\n");
      out.write("\t\t</form>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t<div class=\"well\">\n");
      out.write("\t\t<h2>예약 등록</h2>\n");
      out.write("\t\t<form action=\"/dealight/store/rsvd\" method=\"post\">\n");
      out.write("\t\t\t예약 인원 : <input type=\"number\" name=\"pnum\"></br>\n");
      out.write("\t\t\t매장 번호 : <input type=\"number\" name=\"storeId\" value=\"1\"></br>\n");
      out.write("\t\t\t핫딜 번호 : <input type=\"number\" name=\"htdlId\"></br>\n");
      out.write("\t\t\t결제 승인 번호 : <input type=\"number\" name=\"aprvNo\" value=\"1111\"></br>\n");
      out.write("\t\t\t총 수량 : <input type=\"number\" name=\"totQty\" value=\"2\"></br>\n");
      out.write("\t\t\t총 가격 : <input type=\"number\" name=\"totAmt\" value=\"16000\"></br>\n");
      out.write("\t\t\t==========================================</br>\n");
      out.write("\t\t\t메뉴 이름 : <input type=\"text\" name=\"menuNm\" value=\"치킨\"></br>\n");
      out.write("\t\t\t메뉴 수량 : <input type=\"number\" name=\"menuTotQty\" value=\"2\"></br>\n");
      out.write("\t\t\t메뉴 가격 : <input type=\"number\" name=\"menuPrc\" value=\"16000\"></br>\n");
      out.write("\t\t\t<button type=\"submit\">예약 등록</button>\n");
      out.write("\t\t</form>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t<div class=\"well\">\n");
      out.write("\t\t<h2>핫딜 제안</h2>\n");
      out.write("\t\t<form action=\"/dealight/store/rsvd\" method=\"post\">\n");
      out.write("\t\t\t예약 인원 : <input type=\"number\" name=\"pnum\"></br>\n");
      out.write("\t\t\t매장 번호 : <input type=\"number\" name=\"storeId\" value=\"1\"></br>\n");
      out.write("\t\t\t핫딜 번호 : <input type=\"number\" name=\"htdlId\"></br>\n");
      out.write("\t\t\t결제 승인 번호 : <input type=\"number\" name=\"aprvNo\" value=\"1111\"></br>\n");
      out.write("\t\t\t총 수량 : <input type=\"number\" name=\"totQty\" value=\"2\"></br>\n");
      out.write("\t\t\t총 가격 : <input type=\"number\" name=\"totAmt\" value=\"16000\"></br>\n");
      out.write("\t\t\t==========================================</br>\n");
      out.write("\t\t\t메뉴 이름 : <input type=\"text\" name=\"menuNm\" value=\"치킨\"></br>\n");
      out.write("\t\t\t메뉴 수량 : <input type=\"number\" name=\"menuTotQty\" value=\"2\"></br>\n");
      out.write("\t\t\t메뉴 가격 : <input type=\"number\" name=\"menuPrc\" value=\"16000\"></br>\n");
      out.write("\t\t\t<button type=\"submit\">예약 등록</button>\n");
      out.write("\t\t</form>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("    \t<div id=\"myModal\" class=\"modal\">\n");
      out.write("\t\t<!-- Modal content -->\n");
      out.write("\t\t<div class=\"modal-content\">\n");
      out.write("\t\t\t<span class=\"close\">&times;</span>\n");
      out.write("\t\t\t<ul class=\"rsvdDtls\"></ul>\n");
      out.write("\t\t\t<ul class=\"userRsvdList\"></ul>\n");
      out.write("\t\t\t<ul class=\"waiting_registerForm\"></ul>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t<div id=\"socketAlert\" class=\"alert alert-success\" role=\"alert\" style=\"display:none;\"></div>\n");
      out.write("    <script>\n");
      out.write("    /* Web Socket */\n");
      out.write("    \n");
      out.write(" \n");
      out.write(" $(document).ready( function(){\n");
      out.write("\t\t\n");
      out.write("\t\t// input 내용을 socket에 send\n");
      out.write("\t\t$('.btn_wait').on('click', function(evt) {\n");
      out.write("\t\t\t  evt.preventDefault();\n");
      out.write("\t\t\tif (socket.readyState !== 1) return;\n");
      out.write("\t\t\t\t  let msg = $('input.msg_wait').val();\n");
      out.write("\t\t\t\t  socket.send(msg);\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t$('.btn_rsvd').on('click', function(evt) {\n");
      out.write("\t\t\t  evt.preventDefault();\n");
      out.write("\t\t\tif (socket.readyState !== 1) return;\n");
      out.write("\t\t\t\t  let msg = $('input.msg_rsvd').val();\n");
      out.write("\t\t\t\t  socket.send(msg);\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tconnectWS();\n");
      out.write("});\n");
      out.write("\n");
      out.write(" const userId = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\n");
      out.write("    \n");
      out.write("\t// 모달 선택\n");
      out.write("\tconst modal = $(\"#myModal\"),\n");
      out.write("\t\tclose = $(\".close\"),\n");
      out.write("\t\tmodalContent = $(\".modal-content\"),\n");
      out.write("\t\tbtn_show_board = $(\"#btn_show_board\");\n");
      out.write("\n");
      out.write("\tclose.on(\"click\", (e) => {\n");
      out.write("\t\tmodal.css(\"display\",\"none\");\n");
      out.write("\t\tmodal.find(\"ul\").html(\"\");\n");
      out.write("\t});\n");
      out.write(" \n");
      out.write("    \n");
      out.write(" let socket = null;\n");
      out.write(" \n");
      out.write(" function connectWS() {\n");
      out.write("\t// 전역변수 socket을 선언한다.\n");
      out.write("\t// 다른 페이지 어디서든 소켓을 불러올 수 있어야 하기 때문이다.\n");
      out.write("\t\n");
      out.write(" \t// 소켓을 ws로 연다.\n");
      out.write(" \tlet ws = new WebSocket(\"ws://localhost:8080/manageSocket\");\n");
      out.write(" \tsocket = ws;\n");
      out.write("\n");
      out.write(" \t// 커넥션이 연결되었는지 확인한다.\n");
      out.write(" \tws.onopen = function () {\n");
      out.write(" \t    console.log('Info: connection opened.');\n");
      out.write(" \t};\n");
      out.write("\n");
      out.write(" \t\n");
      out.write(" \t// 받은 메시지를 출력한다.\n");
      out.write(" \t// 메시지를 수신한 이벤트 핸들러와 같다.\n");
      out.write(" \tws.onmessage = function (event) {\n");
      out.write(" \t    console.log(\"ReceiveMessage : \", event.data+'\\n');\n");
      out.write(" \t    \n");
      out.write(" \t    // 추후에 message 형식을 JSON으로 변환해서 message type을 지정해줘야 한다.\n");
      out.write(" \t    //if()\n");
      out.write(" \t    \n");
      out.write(" \t    \n");
      out.write(" \t    let socketAlert = $('#socektAlert');\n");
      out.write(" \t    socketAlert.html(event.data);\n");
      out.write(" \t    socketAlert.css('display','block');\n");
      out.write(" \t   \tshowWaitList(storeId);\n");
      out.write(" \t    \n");
      out.write(" \t    // 메시지가 3초 있다가 자동으로 사라지게\n");
      out.write(" \t    /*\n");
      out.write(" \t    setTimeout( function(){\n");
      out.write(" \t    \t\n");
      out.write(" \t    \t$socketAlert.css('display','none');\n");
      out.write(" \t    },3000);\n");
      out.write(" \t    */\n");
      out.write(" \t};\n");
      out.write("\n");
      out.write("\n");
      out.write(" \t// connection을 닫는다.\n");
      out.write(" \tws.onclose = function (event) {\n");
      out.write(" \t\tconsole.log('Info: connection closed.');\n");
      out.write(" \t\t//setTimeout( function(){ connect(); }, 1000); // retry connection!!\n");
      out.write(" \t};\n");
      out.write(" \tws.onerror = function (event) { console.log('Error'); };\n");
      out.write(" \t\n");
      out.write(" }\n");
      out.write(" \n");
      out.write(" function regWait(wait, callback,error) {\n");
      out.write("\t    \n");
      out.write("     $.ajax({\n");
      out.write("         type : 'post',\n");
      out.write("         url : '/dealight/business/manage/board/waiting/new',\n");
      out.write("         data : JSON.stringify(wait),\n");
      out.write("         contentType : \"application/json; charset=utf-8\",\n");
      out.write("         success : function(result, status, xhr) {\n");
      out.write("             if(callback) {\n");
      out.write("                 callback(result);\n");
      out.write("             }\n");
      out.write("         },\n");
      out.write("         error : function(xhr, status, er) {\n");
      out.write("             if(error) {\n");
      out.write("                 error(er);\n");
      out.write("             }               \n");
      out.write("         }\n");
      out.write("     })\n");
      out.write(" }\n");
      out.write(" \n");
      out.write(" function showWaitRegisterForm(storeId, userId){\n");
      out.write(" \t\n");
      out.write(" \tlet today = new Date();\n");
      out.write(" \tlet strWaitRegForm = \"\";\n");
      out.write(" \tstrWaitRegForm += \"<h1>오프라인 웨이팅 등록</h1>\";\n");
      out.write(" \tstrWaitRegForm += \"<form id='waitRegForm' action='/dealight/business/manage/waiting/register' method='post'>\";\n");
      out.write(" \tstrWaitRegForm += \"고객 아이디<input name='userId' id='js_wait_custNm' value='\"+userId+\"' readonly></br>\";\n");
      out.write(" \tstrWaitRegForm += \"고객 이름<input name='custNm' id='js_wait_custNm'> <span id='name_msg'></span></br>\";\n");
      out.write(" \tstrWaitRegForm += \"고객 전화번호<input name='custTelno' id='js_wait_custTelno'> <span id='phoneNum_msg'></span></br>\";\n");
      out.write(" \tstrWaitRegForm += \"웨이팅 인원<input name='waitPnum' id='js_wait_pnum'> <span id='pnum_msg'></span></br>\";\n");
      out.write(" \tstrWaitRegForm += \"<input name='waitRegTm' value='\"+today+\"' hidden>\";\n");
      out.write(" \tstrWaitRegForm += \"<input name='storeId' value='\"+storeId+\"' hidden>\";\n");
      out.write(" \tstrWaitRegForm += \"<button id='submit_waitRegForm' type='submit'>제출하기</button>\";\n");
      out.write(" \tstrWaitRegForm += \"</form>\";\n");
      out.write(" \tstrWaitRegForm += \"<h2>현재 시간</h2>\";\n");
      out.write(" \tstrWaitRegForm += \"<h2>\"+today+\"</h2>\";\n");
      out.write(" \t\n");
      out.write(" \twaitRegFormUL.html(strWaitRegForm);\n");
      out.write(" \t\n");
      out.write(" \t/* wait register valid check*/\n");
      out.write(" \tconst wait_custNm = document.querySelector(\"#js_wait_custNm\"),\n");
      out.write("     \twait_phoneNum = document.querySelector(\"#js_wait_custTelno\"),\n");
      out.write("     \twait_pnum = document.querySelector(\"#js_wait_pnum\"),\n");
      out.write("     \tbtn_submit = document.querySelector(\"#submit_waitRegForm\"),\n");
      out.write("     \tname_msg = document.querySelector(\"#name_msg\"),\n");
      out.write("     \tphoneNum_msg = document.querySelector(\"#phoneNum_msg\"),\n");
      out.write("     \tpnum_msg = document.querySelector(\"#pnum_msg\"),\n");
      out.write("     \twaitRegForm = document.querySelector('#waitRegForm');\n");
      out.write(" \t\n");
      out.write(" \tconst inputList = [wait_custNm,wait_phoneNum,wait_pnum];\n");
      out.write("\n");
      out.write(" \t// 웨이팅 등록의 valid check를 진행한다.\n");
      out.write(" \tnameLenCheck = function () {\n");
      out.write(" \t\tif(1 <= wait_custNm.value.length && wait_custNm.value.length <= 5)\n");
      out.write(" \t\t\treturn true;\n");
      out.write(" \t\treturn false;\n");
      out.write(" \t}\n");
      out.write("\n");
      out.write(" \tphoneNumLenCheck = function () {\n");
      out.write(" \t\tif(1 <= wait_phoneNum.value.length && wait_phoneNum.value.length <= 13)\n");
      out.write(" \t\t\treturn true;\n");
      out.write(" \t\treturn false;\n");
      out.write(" \t}\n");
      out.write("\n");
      out.write(" \tpnumSizeCheck = function () {\n");
      out.write(" \t\tif(isNaN(wait_pnum.value))\n");
      out.write(" \t\t\treturn false;\n");
      out.write(" \t\tif(1 <= parseInt(wait_pnum.value) && parseInt(wait_pnum.value) <= 10)\n");
      out.write(" \t\t\treturn true;\n");
      out.write(" \t\treturn false;\n");
      out.write(" \t}\n");
      out.write("\n");
      out.write(" \twait_custNm.addEventListener(\"focusout\", () => {\n");
      out.write(" \t\tif(1 <= wait_custNm.value.length){\n");
      out.write(" \t\t    if(nameLenCheck()){\n");
      out.write(" \t\t        name_msg.innerText = \"🙆‍♂️ 이름 형식이 적당하네요.\";\n");
      out.write(" \t\t    }\n");
      out.write(" \t\t    else {\n");
      out.write(" \t\t    \tname_msg.innerText = \"🙅‍♂️ 이름 길이를 다시 확인해 주세요. (5자 이내)\";\n");
      out.write(" \t\t    }\n");
      out.write(" \t\t}\n");
      out.write(" \t})\n");
      out.write("\n");
      out.write(" \twait_phoneNum.addEventListener(\"focusout\", () => {\n");
      out.write(" \t\tif(1 <= wait_phoneNum.value.length){\n");
      out.write(" \t\t    if(phoneNumLenCheck()){\n");
      out.write(" \t\t        phoneNum_msg.innerText = \"🙆‍♂️ 전화번호 형식이 적당하네요!\";\n");
      out.write(" \t\t    }\n");
      out.write(" \t\t    else {\n");
      out.write(" \t\t    \tphoneNum_msg.innerText = \"🙅‍♂️ 전화번호 길이를 다시 확인해 주세요. (13자 이내)\";\n");
      out.write(" \t\t    }\n");
      out.write(" \t\t}\n");
      out.write(" \t})\n");
      out.write("\n");
      out.write(" \twait_pnum.addEventListener(\"focusout\", () => {\n");
      out.write(" \t\tif(1 <= wait_pnum.value.length){\n");
      out.write(" \t\t    if(pnumSizeCheck()){\n");
      out.write(" \t\t        pnum_msg.innerText = \"🙆‍♂️ 인원이 적당합니다.\";\n");
      out.write(" \t\t    }\n");
      out.write(" \t\t    else {\n");
      out.write(" \t\t    \tpnum_msg.innerText = \"🙅‍♂️ 인원이 너무 많거나 형식이 적당하지 않아요! (10명 이내)\";\n");
      out.write(" \t\t    }\n");
      out.write(" \t\t}\n");
      out.write(" \t})\n");
      out.write("\n");
      out.write(" \t// null이면  true\n");
      out.write(" \tnullCheck = function(inputList) {\n");
      out.write(" \t    for(let i = 0; i < inputList.length; i++)\n");
      out.write(" \t        if(inputList[i].value == \"\")\n");
      out.write(" \t            return true;\n");
      out.write(" \t    \n");
      out.write(" \t    return false;\n");
      out.write(" \t}\n");
      out.write(" \t\n");
      out.write(" \tlet modalInputCustNm = modal.find(\"input[name='custNm']\"),\n");
      out.write("\t\t\tmodalInputCutsTelNo = modal.find(\"input[name='custTelno']\"),\n");
      out.write("\t\t\tmodalInputWaitPnum = modal.find(\"input[name='waitPnum']\"),\n");
      out.write("\t\t\tmodalInputCurTime = modal.find(\"input[name='curTime']\"),\n");
      out.write("\t\t\tmodalInputStoreId = modal.find(\"input[name='storeId']\");\n");
      out.write("\t\n");
      out.write(" \tbtn_submit.addEventListener(\"click\", (e) => {\n");
      out.write("\t\t\n");
      out.write(" \t\te.preventDefault();\n");
      out.write(" \t\t\n");
      out.write(" \t\tlet wait = {\n");
      out.write(" \t\t\t\tcustNm : modalInputCustNm.val(),\n");
      out.write(" \t\t\t\tcustTelno : modalInputCutsTelNo.val(),\n");
      out.write(" \t\t\t\tcurTime : modalInputCurTime.val(),\n");
      out.write(" \t\t\t\twaitPnum : modalInputWaitPnum.val(),\n");
      out.write(" \t\t\t\tstoreId : modalInputStoreId.val()\n");
      out.write(" \t\t};\n");
      out.write(" \t\t\n");
      out.write(" \t\t\n");
      out.write(" \t    if(nullCheck(inputList)){\n");
      out.write(" \t        alert(\"필드가 비었어요\")\n");
      out.write(" \t        return;\n");
      out.write(" \t    }\n");
      out.write(" \t    \n");
      out.write(" \t    if(!nameLenCheck()){\n");
      out.write(" \t    \talert(\"🙅이름을 형식에 맞게 입력해주세요\");\n");
      out.write(" \t        return;\n");
      out.write(" \t    }\n");
      out.write(" \t    \n");
      out.write(" \t    if(!phoneNumLenCheck()){\n");
      out.write(" \t        alert(\"🙅전화번호를 형식에 맞게 입력해주세요\");\n");
      out.write(" \t        return;\n");
      out.write(" \t    }\n");
      out.write(" \t    \n");
      out.write(" \t    if(!pnumSizeCheck()){\n");
      out.write(" \t        alert(\"🙅예약인원을 형식에 맞게 입력해주세요\");\n");
      out.write(" \t        return;\n");
      out.write(" \t    }\n");
      out.write(" \t    \n");
      out.write("\n");
      out.write(" \t\tregWait(wait, result => {\n");
      out.write(" \t\t\t\n");
      out.write(" \t\t\t//alert(result);\n");
      out.write("     \t\tshowWaitList(storeId);\n");
      out.write("     \t\tmodal.find(\"ul\").html(\"\");\n");
      out.write(" \t\t\tmodal.find(\"input\").val(\"\");\n");
      out.write(" \t\t\tmodal.css(\"display\",\"none\");\n");
      out.write(" \t\t\t\n");
      out.write(" \t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t});\n");
      out.write(" \t\n");
      out.write(" \t\n");
      out.write(" };\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
